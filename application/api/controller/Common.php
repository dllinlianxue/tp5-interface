<?php
/**
 * Created by PhpStorm.
 * User: intern
 * Date: 2017/11/28
 * Time: 上午9:23
 */
namespace app\api\controller;

use app\common\lib\exception\ApiException;
use think\Cache;
use think\Controller;

class Common extends Controller {
    //初始化
    public function _initialize()
    {
//        $this->checkSignAuth();
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     *对sign签名进行认证
     */
   /* public function checkSignAuth() {
//        $header = request()->header();
//        halt($header);

        //获取请求参数
        $param = input('param.');


        if (empty($param['sign'])) {
//            return show(-1,'缺少sign请求参数',400);
            //TODO:show调用的位置
            throw new ApiException('缺少sign请求参数',400);
        }
//        dump($param);
        unset($param['sign']);
//        halt($param);
        //排序
        ksort($param);
//        halt($param);
        //拼接
        $str = http_build_query($param);
//        halt($str);
        //加密
        $str1 = md5($str);
        $str2 = strtoupper($str1);
        $str3 = $str2.'ababab';
        $str4 =md5($str3);
//        halt($str4);

        if ($str4 != input('param.sign')) {
//            return show(-1,'认证失败',[],401);
            throw new ApiException('认证失败',401);
        }

    }
   */

   public function checkSignAuth() {
       //获取请求参数
       $header = request()->header();
//       dump($header);
       $param = input('param.');
////       dump($param);

//     判断获取的参数是否有值
       if (empty($header['sign']) || empty($header['did']) || empty($header['time'])) {
           throw new ApiException('缺少sign参数',400,1001);
       }

//     get的获取到的参数 赋值给param获取到的参数
       $param['did'] = $header['did'];
       $param['time'] = $header['time'];

//       dump($param);

       //排序
       ksort($param);
//       dump($header);

       //拼接
       $str = http_build_query($param);

       //加密 strtoupper 是转化成大写字母
       $str2 = md5(strtoupper(md5($str)).config('app.sign_pre_halt'));

//       dump($str4);

//     第一层认证sign不相等
       if ($str2 != $header['sign']) {
           throw new ApiException('认证失败',401);
       }


       //第二层认证 sign相等,代表time数据没有被篡改
       if (time() - $header['time'] > config('app.sign_time')) {
           //config('app.sign_time) 配置文件的名称.key值
           throw new ApiException('签名认证超时');
       }

       //sign唯一性验证
       if (Cache::get($header['sign'])) {
           //Cache缓存 能获取到值,说明已经使用sign进行过请求了,不具备唯一性,所以认证不通过
           throw new ApiException('签名不具备唯一性',401);
       }

       //将sign缓存起来,设置缓存有效时间为20s
       Cache::set($header['sign'],'1',config('app.cache_pre_halt'));

   }


}